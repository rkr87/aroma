#!/usr/bin/env python3
"""Entry point for initialising and starting the application."""

import argparse
import logging
import logging.config
import sys
from pathlib import Path

# Add directories to the Python path for module imports
path_dirs: list[str] = ["aroma", "libs"]
for d in path_dirs:
    path: Path = Path(__file__).parent / d
    sys.path.insert(0, str(path))

# pylint: disable=wrong-import-position
from shared import constants  # noqa: E402
from shared.app_config import AppConfig  # noqa: E402


def parse_args() -> argparse.Namespace:
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-r",
        "--refresh",
        action="store_true",
        help="Refresh ROM DB and system cache.",
    )
    parser.add_argument(
        "-l",
        "--launch",
        type=Path,
        help="Provide the file path to a rom/shortcut.",
    )
    return parser.parse_args()


def refresh_roms() -> None:
    """Refresh the ROM database and system cache."""
    logging.info("Refreshing ROM database and system cache...")
    from manager.rom_manager import (  # pylint: disable=import-outside-toplevel
        RomManager,
    )

    rm = RomManager()
    rm.refresh_roms()
    rm.cleanup()
    sys.exit()


def launch_aroma(*, check_for_updates: bool) -> None:
    """Initialise and starts aroma."""
    logging.info("Launching aROMa.")
    from app.aroma_app import (  # pylint: disable=import-outside-toplevel
        AromaApp,
    )
    from updater import Updater  # pylint: disable=import-outside-toplevel

    app: AromaApp = AromaApp()
    if check_for_updates and Updater.check_for_update():
        app.start_update()
    app.start_main()


def rom_launch_menu(file_path: str) -> None:
    """TODO."""
    logging.info("Launching aROMa.")
    from app.aroma_app import (  # pylint: disable=import-outside-toplevel
        AromaApp,
    )

    app: AromaApp = AromaApp()
    app.start_launch_menu(Path(file_path))


if __name__ == "__main__":
    config = AppConfig.load(constants.APP_CONFIG_PATH)
    logging.config.fileConfig(constants.APP_LOGGING_CONFIG_PATH)
    logging.getLogger().setLevel(config.logging_level)

    args = parse_args()
    if args.refresh:
        refresh_roms()
    elif args.launch:
        rom_launch_menu(args.launch)
    else:
        launch_aroma(check_for_updates=config.check_for_updates)
