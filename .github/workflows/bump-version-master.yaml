name: 'Bump Version - Master'

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  bump-version:
    permissions: write-all
    name: 'Bump Version on master-branch'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout source code'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
          ref: 'master'
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install python dependencies
        run: pip install commitizen

      - name: Prepare for commits
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: bump version
        run: cz bump --yes

      - name: Push
        run: |
          git push
          git push --tags

      - name: Create Assets
        run: python generate_release.py

      - name: Get Tag
        id: tag
        run: echo "release_tag=$(cz version --project)" >> $GITHUB_OUTPUT
  
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: aroma.zip
          make_latest: true

      - name: Identify second most recent tag without "a"
        id: identify_tag
        run: |
          SECOND_MOST_RECENT_TAG=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | grep -v 'a' | sed -n '3p')
          echo "SECOND_MOST_RECENT_TAG=$SECOND_MOST_RECENT_TAG" >> $GITHUB_ENV
          if [ -z "$SECOND_MOST_RECENT_TAG" ]; then
            echo "No second most recent tag found. Exiting."
            exit 0
          fi
          TAG_DATE=$(git log -1 --format='%aI' "$SECOND_MOST_RECENT_TAG")
          echo "TAG_DATE=$TAG_DATE" >> $GITHUB_ENV

      - name: Delete old tags containing "a"
        if: env.SECOND_MOST_RECENT_TAG
        run: |
          for tag in $(git for-each-ref --sort=creatordate --format '%(refname:short)' refs/tags | grep 'a'); do
              TAG_CREATION_DATE=$(git log -1 --format='%aI' "$tag")
              if [[ "$TAG_CREATION_DATE" < "$TAG_DATE" ]]; then
                  echo "Deleting tag $tag"
                  git tag -d "$tag"
                  git push origin --delete "$tag"  # Delete tag from the remote
              fi
          done

      - name: Push changes
        if: success()
        run: |
          git push origin --tags